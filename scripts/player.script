local state = false
local wolves = {}

local function play_animation(self, animation)
	if self.current_animation ~= animation then
		self.current_animation = animation
		msg.post("#sprite", "play_animation", { id = animation })
	end
end

function create_wolf()
	table.insert(wolves, factory.create("#wolf"))
end


function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("#collectionproxy", "load")
	go.set_position(vmath.vector3(626, 313, 1))

	self.move = vmath.vector3(0, 0, 0)

	self.wolves = {}

	self.fire_rate = 0.3
	self.fire_timer = 0
	self.health = 10;

	table.insert(wolves, factory.create("#wolf"))
	timer.delay(3, true, create_wolf)
	msg.post("#indicators", "update_health", { health = self.health })
end


function update(self, dt)
	local speed = 300
	local next_pos = go.get_position() + self.move * speed * dt
	if next_pos.x > 34 and next_pos.x < 1252-34 and next_pos.y > 39 and next_pos.y < 626-39 then
		go.set_position(next_pos)
	end
	self.fire_timer = self.fire_timer - dt
end

function on_input(self, action_id, action)
	mouse_x, mouse_y = action.x, action.y
	player_x, player_y = go.get_position().x, go.get_position().y
	player_angle = go.get_rotation()
	delta_x = mouse_x - player_x
	delta_y = mouse_y - player_y
	angle = math.atan2(delta_y, delta_x) + (math.pi / 2)
	go.set_rotation(vmath.quat_rotation_z(angle))


	if action_id == hash('touch')then
		if action.pressed then
			factory.create("#factory")
		end
	elseif action_id == hash('left') then
		if action.pressed then
			self.move.x = -1
		elseif action.released then
			self.move.x = 0
		end
	elseif action_id == hash('right') then
		if action.pressed then
			self.move.x = 1
		elseif action.released then
			self.move.x = 0
		end

	elseif action_id == hash('up') then
		if action.pressed then
			self.move.y = 1
		elseif action.released then
			self.move.y = 0
		end

	elseif action_id == hash('down') then
		if action.pressed then
			self.move.y = -1
		elseif action.released then
			self.move.y = 0
		end
	end

	if self.move.x ~= 0 or self.move.y ~= 0 then
		play_animation(self, hash("player_walk"))
	else
		play_animation(self, hash("player_idle"))
	end
end

function on_message(self, message_id, message, sender)
	if message['other_group'] == hash('wolf') then
		if message['enter'] == true then
			self.health = self.health - 20
			msg.post("#indicators", "update_health", { health = self.health })
			
			if self.health <= 0 then
				for i, v in ipairs(wolves) do
					pcall(go.delete, v)
				end
				go.delete()
				msg.post("#collectionproxy", "enable")
			end
		end
	end
end